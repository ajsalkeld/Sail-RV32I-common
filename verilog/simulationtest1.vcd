$date
	Wed May 26 19:47:09 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top $end
$var wire 1 ! Branch_Enable $end
$var wire 7 " AluCtl_wire [6:0] $end
$var wire 32 # ALUOut [31:0] $end
$var reg 32 $ A [31:0] $end
$var reg 32 % B [31:0] $end
$var reg 4 & FuncCode [3:0] $end
$var reg 7 ' Opcode [6:0] $end
$var reg 1 ( clk $end
$scope module aluCtrl_inst $end
$var wire 4 ) FuncCode [3:0] $end
$var wire 7 * Opcode [6:0] $end
$var reg 7 + ALUCtl [6:0] $end
$upscope $end
$scope module alu_inst $end
$var wire 32 , A [31:0] $end
$var wire 7 - ALUctl [6:0] $end
$var wire 32 . B [31:0] $end
$var wire 1 / clk $end
$var wire 32 0 add_O [31:0] $end
$var reg 32 1 ALUOut [31:0] $end
$var reg 1 ! Branch_Enable $end
$var reg 1 2 CE $end
$var reg 1 3 DEF $end
$var reg 16 4 add_A [15:0] $end
$var reg 16 5 add_B [15:0] $end
$var reg 16 6 add_C [15:0] $end
$var reg 16 7 add_D [15:0] $end
$var reg 1 8 add_addsubbot $end
$var reg 1 9 add_addsubtop $end
$scope module i_sbmac16_addsub $end
$var wire 16 : A [15:0] $end
$var wire 1 3 ACCUMCI $end
$var wire 1 8 ADDSUBBOT $end
$var wire 1 9 ADDSUBTOP $end
$var wire 1 3 AHOLD $end
$var wire 16 ; B [15:0] $end
$var wire 1 3 BHOLD $end
$var wire 16 < C [15:0] $end
$var wire 1 2 CE $end
$var wire 1 3 CHOLD $end
$var wire 1 3 CI $end
$var wire 1 / CLK $end
$var wire 1 = CO $end
$var wire 16 > D [15:0] $end
$var wire 1 3 DHOLD $end
$var wire 1 ? HCI $end
$var wire 1 3 IRSTBOT $end
$var wire 1 3 IRSTTOP $end
$var wire 1 @ LCI $end
$var wire 1 3 OHOLDBOT $end
$var wire 1 3 OHOLDTOP $end
$var wire 1 3 OLOADBOT $end
$var wire 1 3 OLOADTOP $end
$var wire 1 3 ORSTBOT $end
$var wire 1 3 ORSTTOP $end
$var wire 16 A Oh [15:0] $end
$var wire 16 B Ol [15:0] $end
$var wire 1 3 SIGNEXTIN $end
$var wire 1 C clock $end
$var wire 16 D iA [15:0] $end
$var wire 16 E iB [15:0] $end
$var wire 16 F iC [15:0] $end
$var wire 16 G iD [15:0] $end
$var wire 16 H iF [15:0] $end
$var wire 16 I iG [15:0] $end
$var wire 32 J iH [31:0] $end
$var wire 16 K iJ [15:0] $end
$var wire 16 L iK [15:0] $end
$var wire 16 M iQ [15:0] $end
$var wire 16 N iS [15:0] $end
$var wire 16 O iW [15:0] $end
$var wire 16 P iX [15:0] $end
$var wire 16 Q iY [15:0] $end
$var wire 16 R iZ [15:0] $end
$var wire 16 S p_Al_Bl [15:0] $end
$var wire 16 T p_Al_Bh [15:0] $end
$var wire 16 U p_Ah_Bl [15:0] $end
$var wire 16 V p_Ah_Bh [15:0] $end
$var wire 16 W iR [15:0] $end
$var wire 16 X iP [15:0] $end
$var wire 32 Y iL [31:0] $end
$var wire 24 Z iK_e [23:0] $end
$var wire 24 [ iJ_e [23:0] $end
$var wire 16 \ YZ [15:0] $end
$var wire 16 ] XW [15:0] $end
$var wire 1 ^ SIGNEXTOUT $end
$var wire 32 _ O [31:0] $end
$var wire 1 ` LCO $end
$var wire 16 a Bl [15:0] $end
$var wire 16 b Bh [15:0] $end
$var wire 16 c Al [15:0] $end
$var wire 16 d Ah [15:0] $end
$var wire 1 e ACCUMCO $end
$var reg 16 f rA [15:0] $end
$var reg 16 g rB [15:0] $end
$var reg 16 h rC [15:0] $end
$var reg 16 i rD [15:0] $end
$var reg 16 j rF [15:0] $end
$var reg 16 k rG [15:0] $end
$var reg 32 l rH [31:0] $end
$var reg 16 m rJ [15:0] $end
$var reg 16 n rK [15:0] $end
$var reg 16 o rQ [15:0] $end
$var reg 16 p rS [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
0e
b0 d
b0 c
b0 b
b0 a
0`
b0 _
0^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
bx N
bx M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
xC
b0 B
b0 A
0@
0?
b0 >
0=
b0 <
b0 ;
b0 :
09
08
b0 7
b0 6
b0 5
b0 4
03
12
b0 1
b0 0
z/
b0 .
b1111 -
b0 ,
b1111 +
b0 *
b0 )
0(
b0 '
b0 &
b0 %
b0 $
b0 #
b1111 "
0!
$end
#1
1(
#2
0(
#3
1(
#4
0(
#5
b1100100 0
b1100100 _
b1100100 B
b1100100 W
b1100100 \
b1010101 a
b1111 Q
b1111 G
b1111 7
b1111 >
b1010101 R
b1010101 E
b1010101 5
b1010101 ;
b101 #
b101 1
b0 "
b0 +
b0 -
1(
b110011 '
b110011 *
b111 &
b111 )
b1010101 %
b1010101 .
b1111 $
b1111 ,
#6
0(
#7
1(
#8
0(
#9
1(
#10
b1011111 #
b1011111 1
b1 "
b1 +
b1 -
0(
b110 &
b110 )
#11
1(
#12
0(
#13
1(
#14
0(
#15
b10011101111111 0
b10011101111111 _
b10011101111111 B
b10011101111111 W
b10011101111111 \
b1101111 a
b10011100010000 Q
b10011100010000 G
b10011100010000 7
b10011100010000 >
b1101111 R
b1101111 E
b1101111 5
b1101111 ;
b10 "
b10 +
b10 -
b1100100 #
b1100100 1
1(
b0 &
b0 )
b1101111 %
b1101111 .
b10011100010000 $
b10011100010000 ,
#16
0(
#17
1(
#18
0(
#19
1(
#20
b10011101111111 \
b10011101111111 B
b10011101111111 W
b0 ]
b10011101111111 0
b10011101111111 _
b0 A
b0 X
0=
b10011101111111 #
b10011101111111 1
08
09
b110 "
b110 +
b110 -
0(
b1000 &
b1000 )
#21
1(
#22
0(
#23
1(
#24
0(
#25
b10 a
b0 Q
b0 G
b0 7
b0 >
b10 R
b10 E
b10 5
b10 ;
b10 \
b10 B
b10 W
b0 ]
b10 0
b10 _
b0 A
b0 X
b1 #
b1 1
0=
b111 "
b111 +
b111 -
08
09
1(
b10 &
b10 )
b10 %
b10 .
b0 $
b0 ,
#26
0(
#27
1(
#28
0(
#29
1(
#30
b10010 0
b10010 _
b10010 B
b10010 W
b10010 \
b10000 Q
b10000 G
b10000 7
b10000 >
b11 "
b11 +
b11 -
b100 #
b100 1
0(
b101 &
b101 )
b10000 $
b10000 ,
#31
1(
#32
0(
#33
1(
#34
0(
#35
b1001 0
b1001 _
b1001 B
b1001 W
b1001 \
b1 a
b1000 Q
b1000 G
b1000 7
b1000 >
b1 R
b1 E
b1 5
b1 ;
b100 "
b100 +
b100 -
1(
b1101 &
b1101 )
b1 %
b1 .
b1000 $
b1000 ,
#36
0(
#37
1(
#38
0(
#39
1(
#40
b100 0
b100 _
b100 B
b100 W
b100 \
b10 a
b10 Q
b10 G
b10 7
b10 >
b10 R
b10 E
b10 5
b10 ;
b101 "
b101 +
b101 -
b1000 #
b1000 1
0(
b1 &
b1 )
b10 %
b10 .
b10 $
b10 ,
#41
1(
#42
0(
#43
1(
#44
0(
#45
b110011001100110 0
b110011001100110 _
b110011001100110 B
b110011001100110 W
b1010101 b
b110011001100110 \
b1010101 a
b1000100010001 Q
b1000100010001 G
b1000100010001 7
b1000100010001 >
b101010101010101 R
b101010101010101 E
b101010101010101 5
b101010101010101 ;
b1000 "
b1000 +
b1000 -
b10 #
b10 1
1(
b100 &
b100 )
b11111111 %
b11111111 .
b1010101 $
b1010101 ,
#46
0(
#47
1(
#48
0(
#49
1(
#50
0(
#51
1(
#52
0(
#53
1(
#54
0(
#55
1(
#56
0(
#57
1(
#58
0(
#59
1(
#60
0(
