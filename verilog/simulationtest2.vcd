$date
	Wed May 26 22:55:29 2021
$end
$version
	Icarus Verilog
$end
$timescale
	100ms
$end
$scope module top $end
$var wire 1 ! Branch_Enable $end
$var wire 7 " AluCtl_wire [6:0] $end
$var wire 32 # ALUOut [31:0] $end
$var reg 32 $ A [31:0] $end
$var reg 32 % B [31:0] $end
$var reg 4 & FuncCode [3:0] $end
$var reg 7 ' Opcode [6:0] $end
$var reg 1 ( clk $end
$scope module aluCtrl_inst $end
$var wire 4 ) FuncCode [3:0] $end
$var wire 7 * Opcode [6:0] $end
$var reg 7 + ALUCtl [6:0] $end
$upscope $end
$scope module alu_inst $end
$var wire 32 , A [31:0] $end
$var wire 7 - ALUctl [6:0] $end
$var wire 32 . B [31:0] $end
$var wire 1 / clk $end
$var wire 32 0 add_O2 [31:0] $end
$var wire 32 1 add_O [31:0] $end
$var reg 32 2 ALUOut [31:0] $end
$var reg 1 ! Branch_Enable $end
$var reg 1 3 CE $end
$var reg 1 4 DEF $end
$var reg 16 5 add_A [15:0] $end
$var reg 16 6 add_A2 [15:0] $end
$var reg 16 7 add_B [15:0] $end
$var reg 16 8 add_B2 [15:0] $end
$var reg 16 9 add_C [15:0] $end
$var reg 16 : add_C2 [15:0] $end
$var reg 16 ; add_D [15:0] $end
$var reg 16 < add_D2 [15:0] $end
$var reg 1 = add_addsubbot $end
$var reg 1 > add_addsubtop $end
$var reg 1 ? xor_addsubbot $end
$var reg 1 @ xor_addsubtop $end
$scope module i_sbmac16_addsub $end
$var wire 16 A A [15:0] $end
$var wire 1 4 ACCUMCI $end
$var wire 1 = ADDSUBBOT $end
$var wire 1 > ADDSUBTOP $end
$var wire 1 4 AHOLD $end
$var wire 16 B B [15:0] $end
$var wire 1 4 BHOLD $end
$var wire 16 C C [15:0] $end
$var wire 1 3 CE $end
$var wire 1 4 CHOLD $end
$var wire 1 4 CI $end
$var wire 1 / CLK $end
$var wire 1 D CO $end
$var wire 16 E D [15:0] $end
$var wire 1 4 DHOLD $end
$var wire 1 F HCI $end
$var wire 1 4 IRSTBOT $end
$var wire 1 4 IRSTTOP $end
$var wire 1 G LCI $end
$var wire 1 4 OHOLDBOT $end
$var wire 1 4 OHOLDTOP $end
$var wire 1 4 OLOADBOT $end
$var wire 1 4 OLOADTOP $end
$var wire 1 4 ORSTBOT $end
$var wire 1 4 ORSTTOP $end
$var wire 16 H Oh [15:0] $end
$var wire 16 I Ol [15:0] $end
$var wire 1 4 SIGNEXTIN $end
$var wire 1 J clock $end
$var wire 16 K iA [15:0] $end
$var wire 16 L iB [15:0] $end
$var wire 16 M iC [15:0] $end
$var wire 16 N iD [15:0] $end
$var wire 16 O iF [15:0] $end
$var wire 16 P iG [15:0] $end
$var wire 32 Q iH [31:0] $end
$var wire 16 R iJ [15:0] $end
$var wire 16 S iK [15:0] $end
$var wire 16 T iQ [15:0] $end
$var wire 16 U iS [15:0] $end
$var wire 16 V iW [15:0] $end
$var wire 16 W iX [15:0] $end
$var wire 16 X iY [15:0] $end
$var wire 16 Y iZ [15:0] $end
$var wire 16 Z p_Al_Bl [15:0] $end
$var wire 16 [ p_Al_Bh [15:0] $end
$var wire 16 \ p_Ah_Bl [15:0] $end
$var wire 16 ] p_Ah_Bh [15:0] $end
$var wire 16 ^ iR [15:0] $end
$var wire 16 _ iP [15:0] $end
$var wire 32 ` iL [31:0] $end
$var wire 24 a iK_e [23:0] $end
$var wire 24 b iJ_e [23:0] $end
$var wire 16 c YZ [15:0] $end
$var wire 16 d XW [15:0] $end
$var wire 1 e SIGNEXTOUT $end
$var wire 32 f O [31:0] $end
$var wire 1 g LCO $end
$var wire 16 h Bl [15:0] $end
$var wire 16 i Bh [15:0] $end
$var wire 16 j Al [15:0] $end
$var wire 16 k Ah [15:0] $end
$var wire 1 l ACCUMCO $end
$var reg 16 m rA [15:0] $end
$var reg 16 n rB [15:0] $end
$var reg 16 o rC [15:0] $end
$var reg 16 p rD [15:0] $end
$var reg 16 q rF [15:0] $end
$var reg 16 r rG [15:0] $end
$var reg 32 s rH [31:0] $end
$var reg 16 t rJ [15:0] $end
$var reg 16 u rK [15:0] $end
$var reg 16 v rQ [15:0] $end
$var reg 16 w rS [15:0] $end
$upscope $end
$scope module xor_sb_mac16_inst $end
$var wire 16 x A [15:0] $end
$var wire 1 4 ACCUMCI $end
$var wire 1 ? ADDSUBBOT $end
$var wire 1 @ ADDSUBTOP $end
$var wire 1 4 AHOLD $end
$var wire 16 y B [15:0] $end
$var wire 1 4 BHOLD $end
$var wire 16 z C [15:0] $end
$var wire 1 3 CE $end
$var wire 1 4 CHOLD $end
$var wire 1 4 CI $end
$var wire 1 / CLK $end
$var wire 1 { CO $end
$var wire 16 | D [15:0] $end
$var wire 1 4 DHOLD $end
$var wire 1 } HCI $end
$var wire 1 4 IRSTBOT $end
$var wire 1 4 IRSTTOP $end
$var wire 1 ~ LCI $end
$var wire 1 4 OHOLDBOT $end
$var wire 1 4 OHOLDTOP $end
$var wire 1 4 OLOADBOT $end
$var wire 1 4 OLOADTOP $end
$var wire 1 4 ORSTBOT $end
$var wire 1 4 ORSTTOP $end
$var wire 16 !" Oh [15:0] $end
$var wire 16 "" Ol [15:0] $end
$var wire 1 4 SIGNEXTIN $end
$var wire 1 #" clock $end
$var wire 16 $" iA [15:0] $end
$var wire 16 %" iB [15:0] $end
$var wire 16 &" iC [15:0] $end
$var wire 16 '" iD [15:0] $end
$var wire 16 (" iF [15:0] $end
$var wire 16 )" iG [15:0] $end
$var wire 32 *" iH [31:0] $end
$var wire 16 +" iJ [15:0] $end
$var wire 16 ," iK [15:0] $end
$var wire 16 -" iQ [15:0] $end
$var wire 16 ." iS [15:0] $end
$var wire 16 /" iW [15:0] $end
$var wire 16 0" iX [15:0] $end
$var wire 16 1" iY [15:0] $end
$var wire 16 2" iZ [15:0] $end
$var wire 16 3" p_Al_Bl [15:0] $end
$var wire 16 4" p_Al_Bh [15:0] $end
$var wire 16 5" p_Ah_Bl [15:0] $end
$var wire 16 6" p_Ah_Bh [15:0] $end
$var wire 16 7" iR [15:0] $end
$var wire 16 8" iP [15:0] $end
$var wire 32 9" iL [31:0] $end
$var wire 24 :" iK_e [23:0] $end
$var wire 24 ;" iJ_e [23:0] $end
$var wire 16 <" YZ [15:0] $end
$var wire 16 =" XW [15:0] $end
$var wire 1 >" SIGNEXTOUT $end
$var wire 32 ?" O [31:0] $end
$var wire 1 @" LCO $end
$var wire 16 A" Bl [15:0] $end
$var wire 16 B" Bh [15:0] $end
$var wire 16 C" Al [15:0] $end
$var wire 16 D" Ah [15:0] $end
$var wire 1 E" ACCUMCO $end
$var reg 16 F" rA [15:0] $end
$var reg 16 G" rB [15:0] $end
$var reg 16 H" rC [15:0] $end
$var reg 16 I" rD [15:0] $end
$var reg 16 J" rF [15:0] $end
$var reg 16 K" rG [15:0] $end
$var reg 32 L" rH [31:0] $end
$var reg 16 M" rJ [15:0] $end
$var reg 16 N" rK [15:0] $end
$var reg 16 O" rQ [15:0] $end
$var reg 16 P" rS [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
0E"
b0 D"
b0 C"
b0 B"
b0 A"
0@"
b0 ?"
0>"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
bx ."
bx -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
x#"
b0 ""
b0 !"
0~
0}
b0 |
0{
b0 z
b0 y
b0 x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
0l
b0 k
b0 j
b0 i
b0 h
0g
b0 f
0e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
bx U
bx T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
xJ
b0 I
b0 H
0G
0F
b0 E
0D
b0 C
b0 B
b0 A
0@
0?
0>
0=
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
04
13
b0 2
b0 1
b0 0
z/
b0 .
b1111 -
b0 ,
b1111 +
b0 *
b0 )
0(
b0 '
b0 &
b0 %
b0 $
b0 #
b1111 "
0!
$end
#5
1(
#10
0(
#15
1(
#20
0(
#25
1(
#30
0(
#35
1(
#40
0(
#45
1(
#50
b1100100 1
b1100100 f
b1100100 I
b1100100 ^
b1100100 c
b1010101 h
b1111 X
b1111 N
b1111 ;
b1111 E
b1010101 Y
b1010101 L
b1010101 7
b1010101 B
b101 #
b101 2
b0 "
b0 +
b0 -
0(
b110011 '
b110011 *
b111 &
b111 )
b1010101 %
b1010101 .
b1111 $
b1111 ,
#55
1(
#60
0(
#65
1(
#70
0(
#75
1(
#80
0(
#85
1(
#90
0(
#95
1(
#100
b1011111 #
b1011111 2
b1 "
b1 +
b1 -
0(
b110 &
b110 )
#105
1(
#110
0(
#115
1(
#120
0(
#125
1(
#130
0(
#135
1(
#140
0(
#145
1(
#150
b10011101111111 1
b10011101111111 f
b10011101111111 I
b10011101111111 ^
b10011101111111 c
b1101111 h
b10011100010000 X
b10011100010000 N
b10011100010000 ;
b10011100010000 E
b1101111 Y
b1101111 L
b1101111 7
b1101111 B
b10 "
b10 +
b10 -
b10011101111111 #
b10011101111111 2
0(
b0 &
b0 )
b1101111 %
b1101111 .
b10011100010000 $
b10011100010000 ,
#155
1(
#160
0(
#165
1(
#170
0(
#175
1(
#180
0(
#185
1(
#190
0(
#195
1(
#200
b10011010100001 #
b10011010100001 2
b1101100101011110 c
b10011010100001 I
b10011010100001 ^
b1111111111111111 d
b10011010100001 1
b10011010100001 f
b0 H
b0 _
1D
1=
1>
b110 "
b110 +
b110 -
0(
b1000 &
b1000 )
#205
1(
#210
0(
#215
1(
#220
0(
#225
1(
#230
0(
#235
1(
#240
0(
#245
1(
#250
b10 I
b10 ^
b0 d
b10 1
b10 f
b0 H
b0 _
0D
b10 c
b10 h
0=
0>
b0 X
b0 N
b0 ;
b0 E
b10 Y
b10 L
b10 7
b10 B
b1 #
b1 2
b111 "
b111 +
b111 -
0(
b10 &
b10 )
b10 %
b10 .
b0 $
b0 ,
#255
1(
#260
0(
#265
1(
#270
0(
#275
1(
#280
0(
#285
1(
#290
0(
#295
1(
#300
b10010 1
b10010 f
b10010 I
b10010 ^
b10010 c
b10000 X
b10000 N
b10000 ;
b10000 E
b11 "
b11 +
b11 -
b100 #
b100 2
0(
b101 &
b101 )
b10000 $
b10000 ,
#305
1(
#310
0(
#315
1(
#320
0(
#325
1(
#330
0(
#335
1(
#340
0(
#345
1(
#350
b1001 1
b1001 f
b1001 I
b1001 ^
b1001 c
b1 h
b1000 X
b1000 N
b1000 ;
b1000 E
b1 Y
b1 L
b1 7
b1 B
b100 "
b100 +
b100 -
0(
b1101 &
b1101 )
b1 %
b1 .
b1000 $
b1000 ,
#355
1(
#360
0(
#365
1(
#370
0(
#375
1(
#380
0(
#385
1(
#390
0(
#395
1(
#400
b100 1
b100 f
b100 I
b100 ^
b100 c
b10 h
b10 X
b10 N
b10 ;
b10 E
b10 Y
b10 L
b10 7
b10 B
b101 "
b101 +
b101 -
b1000 #
b1000 2
0(
b1 &
b1 )
b10 %
b10 .
b10 $
b10 ,
#405
1(
#410
0(
#415
1(
#420
0(
#425
1(
#430
0(
#435
1(
#440
0(
#445
1(
#450
b110011001100110 1
b110011001100110 f
b110011001100110 I
b110011001100110 ^
b1010101 i
b110011001100110 c
b1010101 h
b1000100010001 X
b1000100010001 N
b1000100010001 ;
b1000100010001 E
b101010101010101 Y
b101010101010101 L
b101010101010101 7
b101010101010101 B
b1000 "
b1000 +
b1000 -
b10101010 #
b10101010 2
0(
b100 &
b100 )
b11111111 %
b11111111 .
b1010101 $
b1010101 ,
#455
1(
#460
0(
#465
1(
#470
0(
#475
1(
#480
0(
#485
1(
#490
0(
#495
1(
#500
0(
#505
1(
#510
0(
#515
1(
#520
0(
#525
1(
#530
0(
#535
1(
#540
0(
#545
1(
#550
0(
#555
1(
#560
0(
#565
1(
#570
0(
#575
1(
#580
0(
#585
1(
#590
0(
#595
1(
#600
0(
#605
1(
#610
0(
#615
1(
#620
0(
#625
1(
#630
0(
#635
1(
#640
0(
#645
1(
#650
0(
#655
1(
#660
0(
#665
1(
#670
0(
#675
1(
#680
0(
#685
1(
#690
0(
#695
1(
#700
0(
#705
1(
#710
0(
#715
1(
#720
0(
#725
1(
#730
0(
#735
1(
#740
0(
#745
1(
#750
0(
#755
1(
#760
0(
#765
1(
#770
0(
#775
1(
#780
0(
#785
1(
#790
0(
#795
1(
#800
0(
#805
1(
#810
0(
#815
1(
#820
0(
#825
1(
#830
0(
#835
1(
#840
0(
#845
1(
#850
0(
#855
1(
#860
0(
#865
1(
#870
0(
#875
1(
#880
0(
#885
1(
#890
0(
#895
1(
#900
0(
#905
1(
#910
0(
#915
1(
#920
0(
#925
1(
#930
0(
#935
1(
#940
0(
#945
1(
#950
0(
